require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.


RSpec.describe RoomsController, type: :controller do

  fixtures :users
  render_views

  # This should return the minimal set of attributes required to create a valid
  # Room. As you add validations to Room, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RoomsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
      @white = users(:white)
      @black = users(:black)
      # @white_name = @white.nick_name.to_sym
      # @black_name = @black.nick_name.to_sym
      # @room = Room.create(white: @white, black: @black)
    end

  describe "GET #index" do
    it "returns a success response" do
      room = Room.create(white: @white, black: @black)
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    before do
      @board = double('Board', get_fen: 'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R')
    end
    it "returns a success response" do
      room = Room.create(white: @white, black: @black)
      ChessServer.instance.rooms[@white.nick_name.to_sym] = room
      room.board = @board
      get :show, params: {id: room.to_param}, session: valid_session
      # expect(response).to render_template false
      expect(response).to be_success
    end
  end

  # describe "GET #new" do
    # it "returns a success response" do
      # get :new, params: {}, session: valid_session
      # expect(response).to be_success
    # end
  # end

  describe "GET #edit" do
    it "returns a success response" do
      room = Room.create(white: @white, black: @black)
      get :edit, params: {id: room.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested room" do
      room = Room.create(white: @white, black: @black)
      expect {
        delete :destroy, params: {id: room.to_param}, session: valid_session
      }.to change(Room, :count).by(-1)
    end

    it "redirects to the rooms list" do
      room = Room.create(white: @white, black: @black)
      delete :destroy, params: {id: room.to_param}, session: valid_session
      expect(response).to redirect_to(rooms_url)
    end
  end

end